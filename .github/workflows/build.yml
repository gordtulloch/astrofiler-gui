name: Build and Release AstroFiler

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a new release'
        required: false
        default: 'false'
        type: boolean

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            artifact_name: "*linux*.tar.gz"
          - os: windows-latest
            platform: windows
            artifact_name: "*windows*.zip"
          - os: macos-13  # Intel Mac
            platform: macos-intel
            artifact_name: "*macos-intel*"
          - os: macos-14  # Apple Silicon Mac  
            platform: macos-apple-silicon
            artifact_name: "*macos-apple-silicon*"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable
      run: |
        python build_packages.py

    - name: List generated files
      shell: bash
      run: |
        echo "Contents of current directory:"
        ls -la
        echo "Contents of dist directory:"
        ls -la dist/ || echo "No dist directory"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: astrofiler-${{ matrix.platform }}
        path: |
          *.tar.gz
          *.zip
          *.dmg
          BUILD_INFO.txt
        retention-days: 30
        if-no-files-found: warn

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.create_release == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts/

    - name: Display downloaded artifacts
      run: |
        echo "Downloaded artifacts:"
        find artifacts/ -type f -name "*.tar.gz" -o -name "*.zip" -o -name "*.dmg"

    - name: Prepare release assets
      run: |
        mkdir -p release_assets
        find artifacts/ -type f \( -name "*.tar.gz" -o -name "*.zip" -o -name "*.dmg" \) -exec cp {} release_assets/ \;
        find artifacts/ -name "BUILD_INFO.txt" -exec cp {} release_assets/ \; || true
        echo "Release assets:"
        ls -la release_assets/

    - name: Extract version from tag
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "version=v$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        name: AstroFiler ${{ steps.get_version.outputs.version }}
        body: |
          ## AstroFiler Release ${{ steps.get_version.outputs.version }}
          
          ### Downloads
          - **Linux x64**: `AstroFiler-*-linux-x64.tar.gz`
          - **Windows x64**: `AstroFiler-*-windows-x64.zip`  
          - **macOS Intel**: `AstroFiler-*-macos-intel.dmg` or `.tar.gz`
          - **macOS Apple Silicon**: `AstroFiler-*-macos-apple-silicon.dmg` or `.tar.gz`
          
          ### Installation
          1. Download the appropriate package for your platform
          2. Extract the archive (Linux/Windows) or mount the DMG (macOS)
          3. Run the executable:
             - **Linux**: `./astrofiler`
             - **Windows**: `astrofiler.exe`
             - **macOS**: Double-click `AstroFiler.app`
          
          ### Features
          - FITS file management and organization
          - Session-based image grouping
          - Statistics and analysis tools
          - Cross-platform compatibility
          - No additional dependencies required
          
          ### System Requirements
          - **Windows**: Windows 10 or later
          - **macOS**: macOS 10.15 (Catalina) or later
          - **Linux**: Recent distributions with glibc 2.17+
          
          For detailed documentation, see the included README.md file.
        files: release_assets/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
